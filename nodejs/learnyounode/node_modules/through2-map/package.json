{
  "name": "through2-map",
  "version": "1.4.0",
  "description": "A through2 to create an Array.prototype.map analog for streams.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:brycebaril/through2-map.git"
  },
  "keywords": [
    "streams",
    "through",
    "through2",
    "map"
  ],
  "author": {
    "name": "Bryce B. Baril"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/brycebaril/through2-map/issues"
  },
  "jshintConfig": {
    "asi": true,
    "globalstrict": true,
    "validthis": true,
    "eqnull": true,
    "node": true,
    "loopfunc": true,
    "newcap": false,
    "eqeqeq": false
  },
  "devDependencies": {
    "tape": "~2.13.2",
    "stream-spigot": "~3.0.4",
    "concat-stream": "~1.4.6"
  },
  "dependencies": {
    "terminus": "~1.0.10",
    "through2": "~0.5.1",
    "xtend": "^3.0.0"
  },
  "readme": "through2-map\n============\n\n[![NPM](https://nodei.co/npm/through2-map.png)](https://nodei.co/npm/through2-map/)\n\nThis is a super thin wrapper around [through2](http://npm.im/through2) that works like `Array.prototype.map` but for streams.\n\nFor when through2 is just too verbose :wink:\n\nNote you will **NOT** be able to skip chunks. This is intended for modification only. If you want filter the stream content, use either `through2` or `through2-filter`. This transform also does not have a `flush` function.\n\n**IMPORTANT:** If you return `null` from your function, the stream will end there.\n\n```js\n\nvar map = require(\"through2-map\")\n\nvar truncate = map(function (chunk) {\n  return chunk.slice(0, 10)\n})\n\n// vs. with through2:\nvar truncate = through2(function (chunk, encoding, callback) {\n  this.push(chunk.slice(0, 10))\n  return callback()\n})\n\n// Then use your map:\nsource.pipe(truncate).pipe(sink)\n\n// Additionally accepts `wantStrings` argument to conver buffers into strings\nvar stripTags = map({wantStrings: true}, function (str) {\n  // OMG don't actually use this\n  return str.replace(/<.*?>/g, \"\")\n})\n\n// Works like `Array.prototype.map` meaning you can specify a function that\n// takes up to two* arguments: fn(chunk, index)\nvar spaceout = map({wantStrings: true}, function (chunk, index) {\n  return (index % 2 == 0) ? chunk + \"\\n\\n\" : chunk\n})\n\n// vs. with through2:\nvar spaceout = through2(function (chunk, encoding, callback) {\n  if (this.index == undefined) this.index = 0\n  var buf = (this.index++ % 2 == 0) ? Buffer.concat(chunk, new Buffer(\"\\n\\n\")) : chunk\n  this.push(buf)\n  return callback()\n})\n\n```\n\n*Differences from `Array.prototype.map`:\n  * Cannot insert `null` elements into the stream without aborting.\n  * No third `array` callback argument. That would require realizing the entire stream, which is generally counter-productive to stream operations.\n  * `Array.prototype.map` doesn't modify the source Array, which is somewhat nonsensical when applied to streams.\n\nAPI\n---\n\n`require(\"through2-map\")([options,] fn)`\n---\n\nCreate a `stream.Transform` instance that will call `fn(chunk, index)` on each stream segment.\n\n`var Tx = require(\"through2-map\").ctor([options,] fn)`\n---\n\nCreate a reusable `stream.Transform` TYPE that can be called via `new Tx` or `Tx()` to create an instance.\n\n`require(\"through2-map\").obj([options,] fn)`\n---\n\nCreate a `through2-map` instance that defaults to `objectMode: true`.\n\n`require(\"through2-map\").objCtor([options,] fn)`\n---\n\nJust like ctor, but with `objectMode: true` defaulting to true.\n\nOptions\n-------\n\n  * wantStrings: Automatically call chunk.toString() for the super lazy.\n  * all other through2 options\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "through2-map@1.4.0",
  "_from": "through2-map@"
}
